{"interfaceLanguages":{"swift":[{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/t\/t\/emojis\/error","title":"static var error: String","type":"property"},{"path":"\/documentation\/t\/t\/emojis\/expectation","title":"static var expectation: String","type":"property"},{"path":"\/documentation\/t\/t\/emojis\/failure","title":"static var failure: String","type":"property"},{"path":"\/documentation\/t\/t\/emojis\/success","title":"static var success: String","type":"property"},{"path":"\/documentation\/t\/t\/emojis\/testing","title":"static var testing: String","type":"property"}],"path":"\/documentation\/t\/t\/emojis","title":"t.Emojis","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/t\/t\/testerror\/description","title":"let description: String","type":"property"},{"path":"\/documentation\/t\/t\/testerror\/filename","title":"let fileName: String","type":"property"},{"path":"\/documentation\/t\/t\/testerror\/functionname","title":"let functionName: String","type":"property"},{"path":"\/documentation\/t\/t\/testerror\/linenumber","title":"let lineNumber: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/t\/t\/testerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/t\/t\/testerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/t\/t\/testerror","title":"t.TestError","type":"struct"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/t\/t\/logger","title":"static var logger: (String) -> Void","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/t\/t\/assert(_:_:linenumber:functionname:filename:)","title":"static func assert(Bool, String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/assert(_:isequalto:_:linenumber:functionname:filename:)","title":"static func assert<Value>(Value, isEqualTo: Value, String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/assert(_:isnotequalto:_:linenumber:functionname:filename:)","title":"static func assert<Value>(Value, isNotEqualTo: Value, String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/assert(isnil:_:linenumber:functionname:filename:)","title":"static func assert<Value>(isNil: Value?, String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/assert(isnotnil:_:linenumber:functionname:filename:)","title":"static func assert<Value>(isNotNil: Value?, String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/assert(nottrue:_:linenumber:functionname:filename:)","title":"static func assert(notTrue: Bool, String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/assertnothrows(_:message:linenumber:functionname:filename:)-1b4av","title":"static func assertNoThrows<Value>(() throws -> Value, message: String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/assertnothrows(_:message:linenumber:functionname:filename:)-82zhj","title":"static func assertNoThrows<Value>(() async throws -> Value, message: String?, lineNumber: Int, functionName: String, fileName: String) async throws","type":"method"},{"path":"\/documentation\/t\/t\/assertthrows(_:message:linenumber:functionname:filename:)-1rg7d","title":"static func assertThrows<Value>(() async throws -> Value, message: String?, lineNumber: Int, functionName: String, fileName: String) async throws","type":"method"},{"path":"\/documentation\/t\/t\/assertthrows(_:message:linenumber:functionname:filename:)-3leh4","title":"static func assertThrows<Value>(() throws -> Value, message: String?, lineNumber: Int, functionName: String, fileName: String) throws","type":"method"},{"path":"\/documentation\/t\/t\/error(description:linenumber:functionname:filename:)","title":"static func error(description: String, lineNumber: Int, functionName: String, fileName: String) -> Error","type":"method"},{"path":"\/documentation\/t\/t\/expect(_:expectation:)-2w43p","title":"static func expect(String?, expectation: () throws -> Void) throws","type":"method"},{"path":"\/documentation\/t\/t\/expect(_:expectation:)-4cdch","title":"static func expect(String?, expectation: () async throws -> Void) async throws","type":"method"},{"path":"\/documentation\/t\/t\/log(_:)","title":"static func log(String)","type":"method"},{"path":"\/documentation\/t\/t\/log(error:)","title":"static func log(error: Error)","type":"method"},{"path":"\/documentation\/t\/t\/suite(named:_:)-4sy0s","title":"static func suite(named: String?, () throws -> Void) -> Bool","type":"method"},{"path":"\/documentation\/t\/t\/suite(named:_:)-5mswn","title":"static func suite(named: String?, () async throws -> Void) async -> Bool","type":"method"},{"path":"\/documentation\/t\/t\/tested(_:)-1opr4","title":"static func tested<Output>(() throws -> Output) throws -> Output","type":"method"},{"path":"\/documentation\/t\/t\/tested(_:)-5cfsn","title":"static func tested<Output>(() async throws -> Output) async throws -> Output","type":"method"},{"path":"\/documentation\/t\/t\/tested(_:_:)-3s7le","title":"static func tested<Output>(String, () async throws -> Output) async throws -> Output","type":"method"},{"path":"\/documentation\/t\/t\/tested(_:_:)-6xnkz","title":"static func tested<Output>(String, () throws -> Output) throws -> Output","type":"method"},{"path":"\/documentation\/t\/t\/unwrap(_:message:linenumber:functionname:filename:)","title":"static func unwrap<Value>(Value?, message: String?, lineNumber: Int, functionName: String, fileName: String) throws -> Value","type":"method"}],"path":"\/documentation\/t\/t","title":"t","type":"enum"}],"path":"\/documentation\/t","title":"t","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}